{
	identity.dns = "promo-wmock-svc.promo-wiremock-svc.svc.cluster.local/promo/identity"
	identity.protocol = "http"

	#price.host.name = "api-ppe.tesco.com/price/v4"
	#price.host.name = "api-dev.tesco.com/price/v4"
	#price.host.name = "dev-eun-api-pricepromotion.northeurope.cloudapp.azure.com"
	price.host.name = dev-eun-api-pricepromotion-v1.northeurope.cloudapp.azure.com
	##for prod
	#price.host.name = "api.tesco.com/price/v4/manage"
	price.protocol = "https"
	price.scheme = "perfgatling"
	price.base-element = "price"

	#promo.dns = "dev-eun-api-pricepromotion.northeurope.cloudapp.azure.com"
	promo.dns = dev-eun-api-pricepromotion-v1.northeurope.cloudapp.azure.com
	promo.scheme = "perfgatling"
	promo.protocol = "https"
	promo.base-element = "price"
	#promo.host.name = "api-ppe.tesco.com/price/v4"
	#promo.host.name = "api-dev.tesco.com/price/v4"
	#promo.host.name = "dev-eun-api-pricepromotion.northeurope.cloudapp.azure.com"
	promo.host.name = dev-eun-api-pricepromotion-v1.northeurope.cloudapp.azure.com
	##for prod
	#promo.host.name = "api.tesco.com/price/v4/manage"
	promo.host.portname = "api.tesco.com"

	rampUsers = "15"
	rampTime = "1"
	maxDuration = "60"
	priceRejectDistributionFactor="1"

	loadDynamicData = true
	database: {
		# Couchbase Data Nodes
		ip = "eun-cb-datanode-0.dev-euw.couchbase,eun-cb-datanode-1.dev-euw.couchbase,eun-cb-datanode-2.dev-euw.couchbase"
		username = Administrator
		password = "${COUCHBASE_PWD}"
		priceBucket = prices
		promoBucket = promotions
	}

	datafeedConfig: {
		approveIPLimit = 40000
		approvePCLimit = 40000
		cancelPCLimit = 40000
		approveCLrncLimit = 20000

		clearanceOverlap = 0
		promoOverlap = 0
		priceOverlap = 0
	}

	# Std params
	loadTestParams: {
		testDuration = 300
		testDurationCombined = 300
		testDurationCL = 300
		targetPostTps = 2
		targetPatchTps = 2
		targetGetTps = 4
		targetPutTps = 2
		firstLevelWaitInMins = 2
		secondLevelWaitInMins = 4
		thirdLevelWaitInMins = 6
		throttleTargetCreateRPS = 60
		throttleTargetPriceRPS=20
		throttlePromoTargetRPS=30
		#tokens
		priceAuthorizationToken = "Bearer "
		priceXAuthToken = "Bearer "

		promoAuthorizationToken = "Bearer "
		promoXAuthToken = "Bearer "

		clrncAuthorizationToken = "Bearer "
		clrncXAuthToken = "Bearer "


		# Actual test will run * 5 Mins
		basePriceRequestDurationInSecs = 600
		overlapInSecs = 10
		noOfTpnbs = 10

		testDurationInMinsPromo = 1
		targetPostTpsPromo = 1
		targetPatchTpsPromo = 1
		targetPollGetTpsPromo = 1
	}
	productAPIKafkaConfig: {
		topic = "plm.productservice.readstore-perf"
		producer.acks = 1
		producer.bootstrap.servers = "10.118.69.183:9092,10.118.69.184:9092,10.118.69.185:9092"
		producer.key.serializer = "org.apache.kafka.common.serialization.StringSerializer"
		producer.value.serializer = "org.apache.kafka.common.serialization.StringSerializer"
	}

}
